binary_expression                 	554
proc_call                         	492
var_declaration                   	491
const_declaration                 	491
index_expression                  	484
if_statement                      	475
for_statement                     	429
struct_type                       	406
var_declaration_repeat2           	289
map_type                          	262
assignment_statement              	168
parameter_list                    	154
struct_type_repeat1               	148
_proc_type                        	136
array_type                        	78
dynamic_array_type                	68
block                             	66
namespaced_type                   	62
compound_literal                  	62
slice_type                        	58
_expression                       	56
enum_variant                      	46
parameter_list_repeat1            	43
namespaced_identifier             	38
proc_literal                      	33
_simple_type                      	32
do_block                          	30
parameter_declaration             	30
for_statement_repeat1             	27
var_declaration_repeat1           	25
unary_expression                  	17
interpreted_string_literal        	16
const_declaration_repeat1         	16
block_repeat2                     	13
_for_clause                       	13
_parenthesized_expression         	12
initializer_list_repeat1          	9
single_assignment                 	8
initializer_list                  	7
import_declaration                	6
block_repeat1                     	6
interpreted_string_literal_repeat1	5
proc_literal_repeat1              	5
empty_statement                   	5
source_file_repeat1               	4
_range_clause                     	4
_statement                        	4
range_expression                  	3
package_clause                    	2
source_file                       	2
_calling_convention               	1
block_directive                   	1
_field_identifier                 	0
_package_identifier               	0
_string_literal                   	0
_bool_literal                     	0
_type                             	0
_declaration                      	0
_type_identifier                  	0
_label_identifier                 	0
struct_directive                  	0
_toplevel_statement               	0

state index: 508
state id: 49
symbol sequence: package_clause identifier : : {
items:
compound_literal → { • }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • initializer_list }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 581
state id: 5016
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = {
items:
compound_literal → { • }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • initializer_list }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 625
state id: 472
symbol sequence: package_clause identifier : : _proc_type { {
items:
compound_literal → { • }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • initializer_list }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 709
state id: 71
symbol sequence: package_clause identifier : [ {
items:
compound_literal → { • }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • initializer_list }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 269
state id: 60
symbol sequence: package_clause identifier : : _simple_type
items:
_expression → _simple_type • (-1 Right)	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { initializer_list }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 719
state id: 5027
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = _simple_type
items:
_expression → _simple_type • (-1 Right)	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { initializer_list }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1380
state id: 490
symbol sequence: package_clause identifier : : _proc_type { _simple_type
items:
_expression → _simple_type • (-1 Right)	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { initializer_list }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1575
state id: 82
symbol sequence: package_clause identifier : [ _simple_type
items:
_expression → _simple_type • (-1 Right)	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type • { initializer_list }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 315
state id: 131
symbol sequence: package_clause identifier : : { }
items:
compound_literal → { } •	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 807
state id: 7391
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = { }
items:
compound_literal → { } •	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1388
state id: 928
symbol sequence: package_clause identifier : : _proc_type { { }
items:
compound_literal → { } •	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1571
state id: 216
symbol sequence: package_clause identifier : [ { }
items:
compound_literal → { } •	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3375
state id: 217
symbol sequence: package_clause identifier : [ { initializer_list
items:
compound_literal → { initializer_list • }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3435
state id: 146
symbol sequence: package_clause identifier : : { initializer_list
items:
compound_literal → { initializer_list • }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3454
state id: 7392
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = { initializer_list
items:
compound_literal → { initializer_list • }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3472
state id: 929
symbol sequence: package_clause identifier : : _proc_type { { initializer_list
items:
compound_literal → { initializer_list • }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 535
state id: 184
symbol sequence: package_clause identifier : : _simple_type {
items:
compound_literal → _simple_type { • }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type { • initializer_list }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 579
state id: 7405
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = _simple_type {
items:
compound_literal → _simple_type { • }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type { • initializer_list }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 620
state id: 989
symbol sequence: package_clause identifier : : _proc_type { _simple_type {
items:
compound_literal → _simple_type { • }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type { • initializer_list }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 711
state id: 236
symbol sequence: package_clause identifier : [ _simple_type {
items:
compound_literal → _simple_type { • }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → _simple_type { • initializer_list }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 337
state id: 372
symbol sequence: package_clause identifier : : { initializer_list }
items:
compound_literal → { initializer_list } •	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 788
state id: 10303
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = { initializer_list }
items:
compound_literal → { initializer_list } •	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1423
state id: 1633
symbol sequence: package_clause identifier : : _proc_type { { initializer_list }
items:
compound_literal → { initializer_list } •	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1570
state id: 530
symbol sequence: package_clause identifier : [ { initializer_list }
items:
compound_literal → { initializer_list } •	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 360
state id: 437
symbol sequence: package_clause identifier : : _simple_type { }
items:
compound_literal → _simple_type { } •	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 786
state id: 10317
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = _simple_type { }
items:
compound_literal → _simple_type { } •	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1422
state id: 1783
symbol sequence: package_clause identifier : : _proc_type { _simple_type { }
items:
compound_literal → _simple_type { } •	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1593
state id: 554
symbol sequence: package_clause identifier : [ _simple_type { }
items:
compound_literal → _simple_type { } •	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3428
state id: 10318
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = _simple_type { initializer_list
items:
compound_literal → _simple_type { initializer_list • }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3436
state id: 1784
symbol sequence: package_clause identifier : : _proc_type { _simple_type { initializer_list
items:
compound_literal → _simple_type { initializer_list • }	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3452
state id: 555
symbol sequence: package_clause identifier : [ _simple_type { initializer_list
items:
compound_literal → _simple_type { initializer_list • }	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 3503
state id: 438
symbol sequence: package_clause identifier : : _simple_type { initializer_list
items:
compound_literal → _simple_type { initializer_list • }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 260
state id: 876
symbol sequence: package_clause identifier : : _simple_type { initializer_list }
items:
compound_literal → _simple_type { initializer_list } •	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 769
state id: 13776
symbol sequence: package_clause identifier : : _proc_type { _proc_type do _expression = _simple_type { initializer_list }
items:
compound_literal → _simple_type { initializer_list } •	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1353
state id: 3087
symbol sequence: package_clause identifier : : _proc_type { _simple_type { initializer_list }
items:
compound_literal → _simple_type { initializer_list } •	[,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 1578
state id: 1089
symbol sequence: package_clause identifier : [ _simple_type { initializer_list }
items:
compound_literal → _simple_type { initializer_list } •	[[, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]

state index: 59
state id: 9325
symbol sequence: package_clause identifier : : _proc_type { if _statement ; _proc_type do for {
items:
block → { • (10) }	[
, ;, [, {, (, do, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
block → { • (10) block_repeat2 }	[
, ;, [, {, (, do, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 60
state id: 3133
symbol sequence: package_clause identifier : : _proc_type { _proc_type do for {
items:
block → { • (10) }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
block → { • (10) block_repeat2 }	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 61
state id: 1095
symbol sequence: package_clause identifier : [ _proc_type do for {
items:
block → { • (10) }	[
, ;, [, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
block → { • (10) block_repeat2 }	[
, ;, [, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 62
state id: 4660
symbol sequence: package_clause identifier : : _proc_type { for ; ; for {
items:
block → { • (10) }	[{, do, #no_bounds_check, #bounds_check]
block → { • (10) block_repeat2 }	[{, do, #no_bounds_check, #bounds_check]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 63
state id: 4461
symbol sequence: package_clause identifier : : _proc_type { if for do for {
items:
block → { • (10) }	[
, ;]
block → { • (10) block_repeat2 }	[
, ;]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 64
state id: 16583
symbol sequence: package_clause identifier : : _proc_type { for ; ; _expression = _proc_type do for {
items:
block → { • (10) }	[
, ;, ,, [, {, (, do, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
block → { • (10) block_repeat2 }	[
, ;, ,, [, {, (, do, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 65
state id: 1657
symbol sequence: package_clause identifier : : _proc_type { if for {
items:
block → { • (10) }	[;]
block → { • (10) block_repeat2 }	[;]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 66
state id: 1014
symbol sequence: package_clause identifier : : _proc_type do for {
items:
block → { • (10) }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
block → { • (10) block_repeat2 }	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 67
state id: 9594
symbol sequence: package_clause identifier : : _proc_type { for ; ; for do for {
items:
block → { • (10) }	[
, ;, {, do, #no_bounds_check, #bounds_check]
block → { • (10) block_repeat2 }	[
, ;, {, do, #no_bounds_check, #bounds_check]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 68
state id: 7309
symbol sequence: package_clause identifier : : _proc_type { _expression = _proc_type do for {
items:
block → { • (10) }	[
, ;, ,, [, struct, {, }, ., map, (, proc, if, for, in, +, -, ~, &, !, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, identifier, type_directive, for_directive, raw_string_literal, ", int_literal, float_literal, nil, true, false]
block → { • (10) block_repeat2 }	[
, ;, ,, [, struct, {, }, ., map, (, proc, if, for, in, +, -, ~, &, !, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, identifier, type_directive, for_directive, raw_string_literal, ", int_literal, float_literal, nil, true, false]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 69
state id: 1387
symbol sequence: package_clause identifier : : { _proc_type do for {
items:
block → { • (10) }	[
, ;, ,, =, [, }, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
block → { • (10) block_repeat2 }	[
, ;, ,, =, [, }, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 70
state id: 4635
symbol sequence: package_clause identifier : : _proc_type { if _proc_type do for {
items:
block → { • (10) }	[
, ;, ,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
block → { • (10) block_repeat2 }	[
, ;, ,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 71
state id: 962
symbol sequence: package_clause identifier : : _proc_type { for {
items:
block → { • (10) }	[
, ;, [, struct, {, }, ., map, (, proc, if, for, +, -, ~, &, !, identifier, type_directive, for_directive, raw_string_literal, ", int_literal, float_literal, nil, true, false]
block → { • (10) block_repeat2 }	[
, ;, [, struct, {, }, ., map, (, proc, if, for, +, -, ~, &, !, identifier, type_directive, for_directive, raw_string_literal, ", int_literal, float_literal, nil, true, false]
compound_literal → { • }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { • initializer_list }	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 57
state id: 1724
symbol sequence: package_clause identifier : : _proc_type { for { }
items:
block → { } • (10)	[
, ;, [, struct, {, }, ., map, (, proc, if, for, +, -, ~, &, !, identifier, type_directive, for_directive, raw_string_literal, ", int_literal, float_literal, nil, true, false]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 58
state id: 10178
symbol sequence: package_clause identifier : : _proc_type { _expression = _proc_type do for { }
items:
block → { } • (10)	[
, ;, ,, [, struct, {, }, ., map, (, proc, if, for, in, +, -, ~, &, !, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, identifier, type_directive, for_directive, raw_string_literal, ", int_literal, float_literal, nil, true, false]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 484
state id: 20411
symbol sequence: package_clause identifier : : _proc_type { for ; ; _expression = _proc_type do for { }
items:
block → { } • (10)	[
, ;, ,, [, {, (, do, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 485
state id: 1838
symbol sequence: package_clause identifier : : _proc_type do for { }
items:
block → { } • (10)	[
, ;, ,, [, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 486
state id: 12415
symbol sequence: package_clause identifier : : _proc_type { if _statement ; _proc_type do for { }
items:
block → { } • (10)	[
, ;, [, {, (, do, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 501
state id: 2352
symbol sequence: package_clause identifier : : { _proc_type do for { }
items:
block → { } • (10)	[
, ;, ,, =, [, }, (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 592
state id: 1951
symbol sequence: package_clause identifier : [ _proc_type do for { }
items:
block → { } • (10)	[
, ;, [, ], (, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 834
state id: 4986
symbol sequence: package_clause identifier : : _proc_type { _proc_type do for { }
items:
block → { } • (10)	[
, ;, ,, =, [, (, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 868
state id: 6823
symbol sequence: package_clause identifier : : _proc_type { if _proc_type do for { }
items:
block → { } • (10)	[
, ;, ,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 872
state id: 12782
symbol sequence: package_clause identifier : : _proc_type { for ; ; for do for { }
items:
block → { } • (10)	[
, ;, {, do, #no_bounds_check, #bounds_check]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 877
state id: 6568
symbol sequence: package_clause identifier : : _proc_type { if for do for { }
items:
block → { } • (10)	[
, ;]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 1421
state id: 2781
symbol sequence: package_clause identifier : : _proc_type { if for { }
items:
block → { } • (10)	[;]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

state index: 1430
state id: 6884
symbol sequence: package_clause identifier : : _proc_type { for ; ; for { }
items:
block → { } • (10)	[{, do, #no_bounds_check, #bounds_check]
compound_literal → { } •	[,, =, [, {, (, do, *=, /=, %=, <<=, >>=, &=, &~=, +=, -=, ~=, |=, in, +, -, ~, &, *, /, %, <<, >>, &~, not_in, |, >, <, <=, >=, ==, &&, ||, #no_bounds_check, #bounds_check]

