================================================================================
Basic features
================================================================================

package pkgname

import "core:fmt"

a := 10
b, c :: 12, "hello\n"

foo :: proc (a, b: int, c: string = "hello") {
  fmt.println(os.args);
  fmt.println(a, b, c)
}

--------------------------------------------------------------------------------

(source_file
  (package_clause
    (package_identifier))
  (import_declaration
    path: (interpreted_string_literal))
  (var_declaration
    name: (identifier)
    (operator)
    (operator)
    value: (int_literal))
  (const_declaration
    name: (const_identifier)
    name: (const_identifier)
    (operator)
    (operator)
    value: (int_literal)
    value: (interpreted_string_literal
      (escape_sequence)))
  (const_declaration
    name: (const_identifier)
    (operator)
    (operator)
    value: (proc_literal
      parameters: (parameter_list
        (parameter_declaration
          name: (identifier)
          name: (identifier)
          type: (type_identifier))
        (parameter_declaration
          name: (identifier)
          type: (type_identifier)
          value: (interpreted_string_literal)))
      body: (block
        (proc_call
          procedure: (namespaced_identifier
            (package_identifier)
            (identifier))
          arguments: (initializer_list
            (namespaced_identifier
              (package_identifier)
              (identifier))))
        (empty_statement)
        (proc_call
          procedure: (namespaced_identifier
            (package_identifier)
            (identifier))
          arguments: (initializer_list
            (identifier)
            (identifier)
            (identifier)))))))

================================================================================
Compund literals and standalone types
================================================================================

package foo

main :: proc () {

  MapType :: map[string]pkg.bool
  const_map :: map[string]pkg.bool{}

  map_typeid := map[string]pkg.bool
  map_variable := map[string]pkg.bool{}

}


--------------------------------------------------------------------------------

(source_file
  (package_clause
    (package_identifier))
  (const_declaration
    (const_identifier)
    (operator)
    (operator)
    (proc_literal
      (parameter_list)
      (block
        (const_declaration
          (const_identifier)
          (operator)
          (operator)
          (map_type
            (keyword)
            (type_identifier)
            (namespaced_type
              (package_identifier)
              (type_identifier))))
        (const_declaration
          (const_identifier)
          (operator)
          (operator)
          (compound_literal
            (map_type
              (keyword)
              (type_identifier)
              (namespaced_type
                (package_identifier)
                (type_identifier)))))
        (var_declaration
          (identifier)
          (operator)
          (operator)
          (map_type
            (keyword)
            (type_identifier)
            (namespaced_type
              (package_identifier)
              (type_identifier))))
        (var_declaration
          (identifier)
          (operator)
          (operator)
          (compound_literal
            (map_type
              (keyword)
              (type_identifier)
              (namespaced_type
                (package_identifier)
                (type_identifier)))))))))

================================================================================
If statements and control flow
================================================================================

package pkgname

main :: proc () {

  if a := 10 ; a < 10 do fmt.println("too small")
  else if a > 10 do fmt.println("too big")
  else { fmt.println("just right") }

  b := 10

  label: if 1 + 10 < 12 do b = b + 1

  x := 10
  for a := 0; a < 10; a = a + 1 do x = x + a

  go: for a in 0..<10 {
  }

}

--------------------------------------------------------------------------------

(source_file
  (package_clause
    (package_identifier))
  (const_declaration
    (const_identifier)
    (operator)
    (operator)
    (proc_literal
      (parameter_list)
      (block
        (if_statement
          (keyword)
          (var_declaration
            (identifier)
            (operator)
            (operator)
            (int_literal))
          (binary_expression
            (identifier)
            (operator)
            (int_literal))
          (do_block
            (keyword)
            (proc_call
              (namespaced_identifier
                (package_identifier)
                (identifier))
              (initializer_list
                (interpreted_string_literal))))
          (keyword)
          (if_statement
            (keyword)
            (binary_expression
              (identifier)
              (operator)
              (int_literal))
            (do_block
              (keyword)
              (proc_call
                (namespaced_identifier
                  (package_identifier)
                  (identifier))
                (initializer_list
                  (interpreted_string_literal))))
            (keyword)
            (block
              (proc_call
                (namespaced_identifier
                  (package_identifier)
                  (identifier))
                (initializer_list
                  (interpreted_string_literal))))))
        (var_declaration
          (identifier)
          (operator)
          (operator)
          (int_literal))
        (if_statement
          (label_identifier)
          (keyword)
          (binary_expression
            (binary_expression
              (int_literal)
              (operator)
              (int_literal))
            (operator)
            (int_literal))
          (do_block
            (keyword)
            (assignment_statement
              (identifier)
              (operator)
              (binary_expression
                (identifier)
                (operator)
                (int_literal)))))
        (var_declaration
          (identifier)
          (operator)
          (operator)
          (int_literal))
        (for_statement
          (keyword)
          (var_declaration
            (identifier)
            (operator)
            (operator)
            (int_literal))
          (binary_expression
            (identifier)
            (operator)
            (int_literal))
          (assignment_statement
            (identifier)
            (operator)
            (binary_expression
              (identifier)
              (operator)
              (int_literal)))
          (do_block
            (keyword)
            (assignment_statement
              (identifier)
              (operator)
              (binary_expression
                (identifier)
                (operator)
                (identifier)))))
        (for_statement
          (label_identifier)
          (keyword)
          (identifier)
          (keyword)
          (range_expression
            (int_literal)
            (int_literal))
          (block))))))
